var tipuesearch = {"pages": [{'title': 'About', 'text': '\n 組長: \n 41023228 陳瑨維_github username: RWE1116   http://[2402:7500:5e4:22b2:c992:6503:fa6d:5c13]:23020/ \n members: \n 41023219 陳冠佑_github username: gu811 \n http://[2001:288:6004:17:2023:cdb:4:1]:23020 \n 41023221 陳冠翰_github username: 41023221  http://[2001:288:6004:17:2023:cdb:4:2]:23020 \n 41023222 陳奕倫_github username: kolas911205  http://[2001:288:6004:17:2023:cdb:4:3]:23020 \n 41023234 黃仕鈞_github username:\xa0Maskie-Razzio  http://[2001:288:6004:17:2023:cdb:4:5]:23020 \n 41023247 劉學宇_github username: 410232 47  http://[2001:288:6004:17:2023:cdb:4:6]:23020   \n 41023251 鄭立揚_github username: sdegbsvrtg  http://[2001:288:6004:17:2023:cdb:4:7]:23020 \xa0 \n 41023254 謝鴻元_github username: 41023254  http://[2001:288:6004:17:2023:cdb:4:8]:23020 \xa0 \n github repository: https://github.com/mdecd2023/2b3-pj3bg4 \n github page: https://mdecd2023.github.io/2b3-pj3bg4 \n latex 分組報告:\xa0 https://github.com/mdecd2023/2b3-pj3bg4/releases \n \n', 'tags': '', 'url': 'About.html'}, {'title': '更新網站步驟', 'text': '1.個人的fork倉儲點選sync fork \n 2.輸入git pull \n 3.進行編輯 \n 4.acp \n 5.從個人fork 倉儲Open pull request \n 6.回到整組倉儲merge pull request \n \n', 'tags': '', 'url': '更新網站步驟.html'}, {'title': 'Instruction', 'text': '#轉載自 40623130 陳鉅忠學長 的個人網站 \n', 'tags': '', 'url': 'Instruction.html'}, {'title': 'Cmd', 'text': 'dir (查看目錄) \n help (指令求救) \n python +名(利用python執行"+名"檔案) \n cls (清除指令紀錄) \n cd +名 (移動) \n 檔名開頭+TAB鍵 (列出全名-可連續按) \n attrib -r -s -h X:\\ . \xa0 /s /d (將X槽的檔案從隱藏還原) \n', 'tags': '', 'url': 'Cmd.html'}, {'title': 'Git', 'text': 'git add (存取資料) \n git commit -m "name" (命名此批欲上傳資料) \n git pull (更新至近端資料) \n git push (上傳至遠端) \n git version (查看git版本) \n git update (更新github版本) \n git revert -m "name"(還原commit -m name紀錄) \n git cleav -n -f(-n列出欲清除的資料 -f真的清除) \n git status (狀態查詢) \n git branch +名 (新建分支) \n git checkout +名 (切換分支) \n git merge +名 (合併分支) \n git log (查看檔案版本) \n git log --oneline --graph --all (檢查各版本間的關聯與樹狀圖) \n \n', 'tags': '', 'url': 'Git.html'}, {'title': 'Notes', 'text': 'ipv6 proxy_2001:288:6004:17::42 #3128 \n download waterfox \n teams cd2023 \n https://mde.tw/cd2023 \n https://mdecd2023.github.io/2a-pj1agx \n', 'tags': '', 'url': 'Notes.html'}, {'title': 'acp時可用詞彙', 'text': '\n 以下是一些常見用於更新網站時標註的英文詞彙： \n \n Title (標題) \n Heading (標題) \n Subheading (副標題) \n Label (標籤) \n Button (按鈕) \n Form (表單) \n Input (輸入) \n Select (選擇) \n Checkbox (勾選框) \n Radio button (單選按鈕) \n Menu (菜單) \n Navigation (導覽) \n Footer (頁尾) \n Link (連結) \n Image (圖片) \n Video (影片) \n Text (文字) \n Paragraph (段落) \n List (清單) \n Table (表格) \n Error message (錯誤訊息) \n Success message (成功訊息) \n Alert (警示) \n Confirmation (確認) \n Submit (提交) \n Cancel (取消) \n Back (返回) \n Next (下一步) \n Save (儲存) \n Edit (編輯) \n \n \n 以下是一些常見的動詞，可用於描述網站更新操作： \n \n Update (更新) \n Modify (修改) \n Add (新增) \n Delete (刪除) \n Edit (編輯) \n Publish (發佈) \n Upload (上傳) \n Download (下載) \n Move (移動) \n Resize (調整大小) \n Change (變更) \n Rearrange (重新排列) \n Customize (自訂) \n Refresh (重新整理) \n Preview (預覽) \n Save (儲存) \n Undo (復原) \n Redo (重做) \n Copy (複製) \n Paste (貼上) \n \n', 'tags': '', 'url': 'acp時可用詞彙.html'}, {'title': 'overview', 'text': '\n \xa0 field+board FPSS \n \xa0 field+board   field+castles \n', 'tags': '', 'url': 'overview.html'}, {'title': 'group', 'text': '\n \n 亂數 \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n \n \n \n \n', 'tags': '', 'url': 'group.html'}, {'title': '會議記錄', 'text': '', 'tags': '', 'url': '會議記錄.html'}, {'title': '5月24', 'text': '討論事項:分配工作、討論機器人規格 \n 工作分配: \n \n 繪圖:41023234、41023247 \n \n \n PDF:41023228、41023251  \n \n 程式:41023228、41023251、41023254  \n \n PPT:41023219、41023222  \n 輔助:41023221、41023228 \n 會議影片: https://www.youtube.com/live/_WezVHd--LY?feature=share \n 5月25 \n', 'tags': '', 'url': '5月24.html'}, {'title': '5月25', 'text': '討論事項:今日工作報告 \n 21、54、19:測試連線 \n 51:更新latex報告 \n 34:繪製球員 \n 47:繪製計分裝置 \n 28:督導、協助 \n 會議影片:  \n \n', 'tags': '', 'url': '5月25.html'}, {'title': '6月1', 'text': '回報各自進度 \n \n', 'tags': '', 'url': '6月1.html'}, {'title': '分組報告', 'text': 'latex 分組報告:\xa0 https://github.com/mdecd2023/2b3-pj3bg4/releases \n pj3bg4 ptt \n \n \n \n 國 立 虎 尾 科 技 大 學 機 械 設 計 工 程 系 cd2023 2b-pj3bg4 分組報告 網際足球場景設計 Web-based Football Scene Design \n           國       立       虎       尾       科       技       大       學       機       械       設       計       工       程       系       cd2023 2b-pj3bg4       分   組   報   告       網   際   足   球   場   景   設   計       Web-based Football Scene Design         \n           •   指   導   教   授   ：       嚴       家       銘       老       師       •   班       級   ：       四       設       二       乙       •   學       生   ：       陳       冠       佑       (41023219)           陳       冠       翰       (41023221)           陳       奕       倫       (41023222)           陳       瑨       維       (41023228)           黃       仕       鈞       (41023234)               劉       學       宇       (41023247)           鄭       立       揚       (41023251)               謝       鴻       元       (41023254)         \n \n 目 錄  \n           目       錄               •   會   議   記   錄   •   足   球   場   景           足   球   場   地   球   門   和   球   計   分   板       球   員   整   體           5/24   5/25   6/1                   第   一   版   第   二   版   第   三   版               第   一   版   第   二   版   第   三   版   第   四   版               第   一   版   第   二   版         \n \n 會議記錄 \n           會   議   記   錄               5/24:   https://www.youtube.com/live/_WezVHd--   LY?feature=share   討   論   事   項   :   分   配   工   作   、   討   論   機   器   人   規   格   分   配   工   作       :       畫   圖   :41023234   、   41023247       PDF:41023228   、   41023251       程   式   :41023228   、   41023251   、   41023254       PPT:41023219   、   41023222       輔   助   ；   41023221   、   41023228         \n             5/25:   https://youtu.be/IA19dIkLgtA   討   論   事   項   :   今   日   工   作   報   告   21   、   54   、   19:   測   試   連   線   51:   更   新   latex   報   告   34:   繪   製   球   員   47:   繪   製   計   分   裝   置   28:   督   導   、   協   助         \n           6/1:           討   論   事   項   :   確   認   工   作   進   度               https://www.youtube.com/live/_K1bM48   CZgw?feature=share         \n \n 足球場景 \n                                       足   球   場   景           我   們   首   先   先   把   足   球   場   地   畫   出   來   ，   長   為   4m   ，   寬   為   2.5m   。             足   球   場   地   (   第   一   版   ):                   Onshape:           CoppeliaSim:           \n                           足   球   場   地   (   第   二   版   ):               由   於   前   一   版   的   場   地   在   模   擬   時   ，   會   造   成   CoppeliaSim   之   幀   數   過   高   ，   因   此   我   們   將   場   地   的   外   型   簡   化   以   降   低   幀   數   。         \n                               球   門   和   球   :           球   門   的   規   格   為       長   0.6m   ，   寬   0.31281m   ，   高   0.09848m   。   球   的   規   格   為       白   色   ，   直   徑   0.1m   ，   重   量   0.5kg   。             \n                                                   記   分   板   (   第   一   版   ):                   該   版   本   之   記   分   板   如   下   圖   ，   本   因   中   間   之   轉   盤   一   換   成   日   內   瓦   機   構   ，   但   因   在   初   步   設   計   時   ，   未   詳   細   考   慮   公   差   配   合   ，   因   此   放   棄   該   版   本   ，   改   由   下   面   之   次   代   及   三   代   記   分   板   取   代   。             日   內   瓦   機   構           \n                                                               記   分   板   (   第   二   版   ):                             為   一   個   機   械   轉   盤   傳   動   計   分   系   統   。           \n                                                                     記   分   板   (   第   三   版   ):             數   字   都   改   模   成   新   版   的   個   別   分   件   ，   通   過   平   面   配   合   各   自   組   裝   ，   使   其   可   更   加   明   顯   ，   且   外   殼   多   擴   兩   孔   、   齒   輪   微   調   和   增   加   輔   助   軸   ，   使   輪   盤   更   方   便   抓   到   支   點   且   連   動   更   順   滑   ，   雖   然   變   化   看   起   來   不   大   但   總   體   表   現   都   有   一   定   更   新   。                         \n                                                               球   員   (   第   一   版   ):                   1   號   機   器   人   :           2   號   機   器   人   :           3   號   機   器   人   :           4   號   機   器   人   :             球   員   尺   寸   為       長   0.16m   ，   寬   0.14m   ，   高   為   0.2m   。   該   機   器   人   之   設   計   較   為   簡   單   ，   且   不   複   雜   ，   較   適   合   3D   繪   圖   新   手   。   我   們   在   這   四   台   機   器   人   上   面   分   別   做   了   不   同   的   記   號   ，   以   做   為   區   別   。         \n                                                               球   員   (   第   二   版   ):                   1   號   機   器   人   :           2   號   機   器   人   :           3   號   機   器   人   :           4   號   機   器   人   :           該   系   列   設   計   較   為   複   雜   ，   且   不   適   合   新   手   製   作   。           \n                                                                       球   員   (   第   二   版   ):           5   號   機   器   人   :           6   號   機   器   人   :           7   號   機   器   人   :           8   號   機   器   人   :           \n                           球   員   (   第   三   版   ):               由   於   將   前   一   版   的   球   員   放   入   CoppeliaSim   裡   ，   會   使   CoppeliaSim   之   幀   數   過   高   ，   使   其   整   體   運   行   過   慢   ，   因   此   將   機   器   人   重   新   設   計   。         \n                           球   員   (   第   四   版   ):                   經   過   多   次   修   改   以   及   簡   化   ，   我   們   最   終   決   定   採   用   這   一   版   。   尺   寸   為       長   0.16m   ，   寬   0.12m   ，   高   0.05m   。         \n                                           整   體   :           足   球   場   地   +   球   門   +   球   +   記   分   板   +   球   員         \n', 'tags': '', 'url': '分組報告.html'}, {'title': 'pj3', 'text': '資料來源: https://mde.tw/cd2023/content/pj3.html   \n  <script src="./../cmsimde/static/jquery.js"></script>  \n \n  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>  \n \n \n \n \n \n \n  for Wink3 客製化關閉  \n \n \n        <link rel="stylesheet" type="text/css" href="./../cmsimde/static/winkPlayer.css" />\n        <script type="text/javascript" src="./../cmsimde/static/winkPlayer.js"></script>\n         \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  暫時不用\n<script src="./../cmsimde/static/fengari-web.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/Cango-13v08-min.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/CangoAxes-4v01-min.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/gearUtils-05.js"></script>\n \n \n  for Brython 暫時不用\n<script src="https://scrum-3.github.io/web/brython/brython.js"></script>\n<script src="https://scrum-3.github.io/web/brython/brython_stdlib.js"></script>\n \n \n \n \n 列出 2a 所有學員 cd2023 相關的倉儲與網站連結  ( random ) \n 列出 2b 所有學員 cd2023 相關的倉儲與網站連結  ( random ) \n 列出 pj3 各組網站與倉儲連結 \n \n CoppeliaSimEdu_4.5.1_threejsFrontend_disable_movement_of_objects.7z \n 利用系統管理員身分執行批次檔案指令, 設定防火牆允許 TCP 封包對 CoppeliaSim zmq server 連線 (in 權限開啟 23000-23050): \n allow_23000-23050_tcp_in_firewall_setting.7z \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n \n \n \n echo off \n REM netsh advfirewall firewall add rule name= "RULENAME"   dir=[ in /out] action=[allow/block/bypass] protocol=[tcp/udp] localip=[any] remoteip=[any] \n REM allow tcp  in   for   port 23000-23050 \n netsh advfirewall firewall add rule name= "allow_23000-23050"   dir= in   action=allow protocol=TCP localport=23000-23050 \n netsh advfirewall firewall add rule name= "allow_23000-23050"   dir=out action=allow protocol=TCP localport=23000-23050 \n \n \n \n \n \n \n \n 特定 IP 區段不經過 Proxy Server 連線: \n localhost;192.168.1.0/24;[2001:288:6004:17::]/32 \n Soccer Robot  Team 協同設計與模擬控制: \n https://ssl.robocup.org/ \n https://youtu.be/_Y5_iGxWFrQ \n \n 2a w12 說明 pj3 要求以及如何在 stud2 主機中利用 public_html 伺服靜態網站內容.mp4 \n 2a w13 說明各組員可以自行決定要如何使用 stud2 主機上的兩個 ports 啟用動態網站.mp4 \n 利用 hupper3 -m server.py 在個人的內部埠號啟用動態網站後, 若要刪除該帳號所啟用, 以 hupper3 及 python3 啟動執行的 processes, 可以利用以下指令: \n \n \n \n \n \n \n 1 \n \n \n \n pkill -u $USER -f  "hupper3|python3" \n \n \n \n \n \n \n \n acp 修改: 加入 cd ./../public_html/cd2023, git pull \n \n 專案三: 接續專案二, 各組需 對雙輪車進行設計改良,\xa0 以提升行進與對戰效能 , 各組需採 CAD 進行場景與多輪車零組件設計後, 轉入足球場景中 以鍵盤 arrow keys 與 wzas 等按鍵進行控制 , 對陣雙方每組將有 四名輪車球員 , 且每兩人在同一台電腦上操作, 完成後各組需在分組網站中提供所有相關檔案 下載連結 , 且提供 線上分組簡報 與 分組 pdf 報告 連結. \n 球賽計分系統必須採 .ttm 格式建立 (0~99), 使能通用於各類場景計數之用, 並可擴增至三位數計分. \n 除了採用 LED 顯示計分外, 請另外以建立以 機械轉盤傳動計分系統  ( mechanical counter ), 且採 .ttm 格式建立. \n 協同產品設計規格: \n 足球規格 (ball): 白色, 直徑 0.1m, 重量 0.5kg \n 足球場地 (field): 長 4m x 寬 2.5m \n 球門規格 (goal[0] and goal[1]: 長 0.6m, 高 0.3m, 寬 0.1m \n 球員尺寸範圍(player[0]-player[7]: 長寬高各 0.2m, 重量 5kg \n cd2023_pj3_football_field_specification_ttt.7z \n kmolcar.7z  ( ref ) \n kmol_counter.7z  ( ref ) \n cd2023_pj3ag4_zmq_football4.7z \n cd2023_pj3ag4_gear scoreboard_solidworks.zip \n Reference:  https://cs448m.github.io/lectures/machines/doc/4.pdf \n 進階延伸: \n https://github.com/lcgamboa/picsimlab \n https://sourceforge.net/projects/com0com/ \n 利用 picsimlab 中的 零組件 與 CoppeliaSim 場景中的零件結合, 協同設計者可在實體零組件實作之前, 可透過虛擬零件、虛擬感測器與虛擬制動器, 利用序列埠傳送資料, 對模擬場景進行機電系統控制. \n \n Cyber_Physical_Coppeliasim_Arduino_setup_dia.7z \n \n soccer field image from  public domain . \n 各組交付內容: \n 專案三場景與多輪車零組件設計 (可使用各種 CAD 系統建立, 但必須提供完整的檔案下載連結) \n 專案三控制程式 (以 zmqRemoteAPI Python 製作), 除可由各組員分別跨網路控制各自的球員外, 必須建立模擬啟動後, 由雙方的 自動控制程式 控制各自的球員後, 進行賽局. \n 專案三開會紀錄與逐字稿 (可利用 jit.si 或 OBS 或其他線上開會系統) \n 專案三各組員任務分配與執行過程影片 (可置於 Youtube 或 Onedrive) \n 專案三網站包括所有協同設計流程所衍生的檔案下載連結, 各檔案必須設法壓縮在 30 MB 內並置於網站downloads 目錄中. \n 專案三線上簡報檔案 \n 專案三分組報告 pdf 檔案 \n \n 協同設計專案執行: \n MCAD: SolidWorks, Solid Edge, Inventor, NX, Solvespace \n Robot Simulation: CoppeliaSim \n Distributed Version Control system: Git (Github), fossil (Fossil SCM) \n File repository: Google Drive, OneDrive, sftp server. \n Dynamic site: Repllit, wsgi server. \n Static site: Github Pages, Nginx server, Fossil SCM documentation server \n \n From  https://store.steampowered.com/app/580820/Robot_Soccer_Challenge/ \n \n 下載就 Visualization Stream server 支援 IPv4 與 IPv6 的 CoppeliaSim 4.5.1rev4_kmol.7z \xa0 (for @nfu users only) \n 直接利用 zmqRemoteAPI Python 程式建立場景物件: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n \n \n \n # zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容 \n from   zmqRemoteApi_IPv6  import   RemoteAPIClient \n import   time \n import   math \n import   keyboard \n \xa0 \n # 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線 \n client  =   RemoteAPIClient( \'localhost\' ,  23000 ) \n # 以 getObject 方法取得場景物件 \n sim  =   client.getObject( \'sim\' ) \n box  =   sim.getObject( \'/box\' ) \n \xa0 \n # 啟動模擬 \n sim.startSimulation() \n # 建立尺寸數列, 分別定義 x, y, z 方向尺寸 \n x  =   0.2 \n y  =   0.2 \n z  =   0.1 \n size  =   [x, y, z] \n \xa0 \n # 利用 size 數列, 建立圓柱物件, 2 代表 cylinder \n # 8 表示 respondable, 1 為 質量 \n digit1_handle  =   sim.createPureShape( 2 ,  8 , size,  1 ,  None ) \n # 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤 \n # 之後可再導入帶有數字組立的外型零件 \n sim.setObjectAlias(digit1_handle,  \'digit1\' ) \n # 轉角單位為徑度 \n sim.setObjectOrientation(digit1_handle,  - 1 , [ 0 , math.pi / 2 ,  0 ]) \n # 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升一個半徑高度 \n sim.setObjectPosition(digit1_handle,  - 1 , [ 0 ,  0 , x / 2 ]) \n \xa0 \n # 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity \n joint1_handle  =   sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic,  0 ,  None ) \n sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity) \n sim.setObjectAlias(joint1_handle,  \'joint1\' ) \n \xa0 \n # 取得 cylinder 的位置座標 \n digit1_pos  =   sim.getObjectPosition(digit1_handle,  - 1 ) \n joint1_pos  =   [digit1_pos[ 0 ], digit1_pos[ 1 ], digit1_pos[ 2 ]] \n \xa0 \n # 將 joint1 至於 cylinder 中心 \n sim.setObjectPosition(joint1_handle,  - 1 , joint1_pos) \n # 取得 digit1_handle 的方位 \n digit1_ori  =   sim.getObjectOrientation(digit1_handle,  - 1 ) \n # 將 joint1_handle 方位與 digit1 對齊 \n sim.setObjectOrientation(joint1_handle,  - 1 , digit1_ori) \n \xa0 \n # 將 joint1 置於 box 上 \n sim.setObjectParent(joint1_handle, box,  True ) \n # 將 cylinder 置於 joint1 上 \n sim.setObjectParent(digit1_handle, joint1_handle,  True ) \n \xa0 \n # 鎖定 joint1 \n sim.setJointForce(joint1_handle,  float ( \'inf\' )) \n \xa0 \n print ( "基本場景建立完成!" ) \n \xa0 \n # 設定主迴圈 \n while   True : \n \xa0\xa0\xa0\xa0 # 設定 joint1 目標速度 \n \xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(joint1_handle,  10 ) \n \xa0\xa0\xa0\xa0 # 讓 coppeliasim 有時間按照設定讓 joint1 旋轉 \n \xa0\xa0\xa0\xa0 time.sleep( 0.01 )  \n \xa0 \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'q\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 可以按下 q 鍵跳出重複執行迴圈 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break \n \xa0 \n # 終止模擬 \n #sim.stopSimulation() \n \n \n \n \n \n \n \n zmqremoteapi_IPv6_mechanical_counter_creation1.7z \n 以下利用 zmqRemoteApi_IPv6 Python 建立機械轉盤後, 納入每按一下 i 轉盤即順時鐘旋轉 36 度: \n mechanical_counter_rotate_increment.py 程式如下: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n \n \n \n # zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容 \n from   zmqRemoteApi_IPv6  import   RemoteAPIClient \n import   time \n import   math \n import   keyboard \n \xa0 \n # 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線 \n client  =   RemoteAPIClient( \'localhost\' ,  23000 ) \n # 以 getObject 方法取得場景物件 \n sim  =   client.getObject( \'sim\' ) \n box  =   sim.getObject( \'/box\' ) \n \xa0 \n # 啟動模擬 \n #sim.startSimulation() \n # 建立尺寸數列, 分別定義 x, y, z 方向尺寸 \n x  =   0.2 \n y  =   0.2 \n z  =   0.1 \n size  =   [x, y, z] \n \xa0 \n # 利用 size 數列, 建立圓柱物件, 2 代表 cylinder \n # 8 表示 respondable, 1 為 質量 \n digit1_handle  =   sim.createPureShape( 2 ,  8 , size,  1 ,  None ) \n # 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤 \n # 之後可再導入帶有數字組立的外型零件 \n sim.setObjectAlias(digit1_handle,  \'digit1\' ) \n # 轉角單位為徑度 \n sim.setObjectOrientation(digit1_handle,  - 1 , [ 0 , math.pi / 2 ,  0 ]) \n # 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升半徑高度 \n sim.setObjectPosition(digit1_handle,  - 1 , [ 0 ,  0 , x / 2 ]) \n \xa0 \n # 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 position \n joint1_handle  =   sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic,  0 ,  None ) \n sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_position) \n sim.setObjectAlias(joint1_handle,  \'joint1\' ) \n # https://mde.tw/pjcopsim/content/objectParameterIDs.html \n # sim.jointintparam_dynposctrltype \n # int32 parameter: the dynamic position control type of the joint: 0=PID, 1=motion profile \n # 將 joint1 參數 sim.jointintparam_dynposctrltype 設為 1 表示在 dynamic mode 中使用 position control mode \n # 且啟用 motion profile control \n sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynposctrltype,  1 ) \n \xa0 \n \xa0 \n # 取得 cylinder 的位置座標 \n digit1_pos  =   sim.getObjectPosition(digit1_handle,  - 1 ) \n # 將 joint1 位置與 digit1 位置重合 \n joint1_pos  =   [digit1_pos[ 0 ], digit1_pos[ 1 ], digit1_pos[ 2 ]] \n \xa0 \n # 將 joint1 至於 cylinder 中心 \n sim.setObjectPosition(joint1_handle,  - 1 , joint1_pos) \n # 取得 digit1_handle 的方位 \n digit1_ori  =   sim.getObjectOrientation(digit1_handle,  - 1 ) \n # 將 joint1_handle 方位與 digit1 對齊 \n sim.setObjectOrientation(joint1_handle,  - 1 , digit1_ori) \n \xa0 \n # 將 joint1 置於 box 上 \n sim.setObjectParent(joint1_handle, box,  True ) \n # 將 cylinder 置於 joint1 上 \n sim.setObjectParent(digit1_handle, joint1_handle,  True ) \n \xa0 \n # 鎖定 joint1 \n sim.setJointForce(joint1_handle,  float ( \'inf\' )) \n \xa0 \n print ( "基本場景建立完成!" ) \n \xa0 \n # 重複執行迴圈 \n while   True : \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'i\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 每按一次 i, 就會轉動 -36 度, 且轉為徑度 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 target_angle  =   math.radians( - 36 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_angle  =   sim.getJointPosition(joint1_handle) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 new_angle  =   current_angle  +   target_angle \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetPosition(joint1_handle, new_angle) \n \xa0 \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'q\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 按下 q 則會跳出迴圈 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break \n \xa0 \n \xa0\xa0\xa0\xa0 # 暫停 0.01 秒 \n \xa0\xa0\xa0\xa0 time.sleep( 0.01 ) \n \xa0 \n # 停止模擬 \n #sim.stopSimulation() \n \n \n \n \n \n \n \n \n numbering_digits.7z \n 可用於控制 mechanical_counter_rotary_digit1.ttt 的 zmq Python 程式碼, mechanical_counter_rotary_digit1_control.py \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n \n \n \n # zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容 \n from   zmqRemoteApi_IPv6  import   RemoteAPIClient \n import   time \n import   math \n import   keyboard \n \xa0 \n # 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線 \n client  =   RemoteAPIClient( \'localhost\' ,  23000 ) \n # 以 getObject 方法取得場景物件 \n sim  =   client.getObject( \'sim\' ) \n box  =   sim.getObject( \'/box\' ) \n joint1_handle  =   sim.getObject( \'/joint1\' ) \n # 啟動模擬 \n sim.startSimulation() \n \xa0 \n # 主重複迴圈 \n while   True : \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'i\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 每按一次 i 順時鐘旋轉 36 度 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 target_angle  =   math.radians( - 36 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_angle  =   sim.getJointPosition(joint1_handle) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 new_angle  =   current_angle  +   target_angle \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetPosition(joint1_handle, new_angle) \n \xa0 \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'q\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 按下 q 可以跳出重複迴圈 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break \n \xa0 \n \xa0\xa0\xa0\xa0 # 暫停 0.01 秒 \n \xa0\xa0\xa0\xa0 time.sleep( 0.01 ) \n \n \n \n \n \n \n \n mechanical_counter_zmq_create_and_control_example.7z \n 為了確保每次按下 i 鍵一次都會完整執行預設數字轉盤旋轉 36 度, 將上列控制程式修改為: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n \n \n \n # zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容 \n from   zmqRemoteApi_IPv6  import   RemoteAPIClient \n import   time \n import   math \n import   keyboard \n \xa0 \xa0 \n # 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線 \n client  =   RemoteAPIClient( \'localhost\' ,  23000 ) \n # 以 getObject 方法取得場景物件 \n sim  =   client.getObject( \'sim\' ) \n box  =   sim.getObject( \'/box\' ) \n joint1_handle  =   sim.getObject( \'/joint1\' ) \n # 啟動模擬 \n #sim.startSimulation() \n # 加入按鍵狀態, 起始值為 false \n key_pressed  =   False \n counter  =   0 \n \xa0 \n while   True : \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'i\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   not   key_pressed: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 當 i 鍵按下, 在按鍵狀態設為 True 之前, 執行預設流程 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "i 鍵按下!" ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 每按一次 i 順時鐘旋轉 36 度 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 counter  =   counter  +   1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (counter) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # in radian \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 target_angle  =   math.radians( - 36 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # in radian \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 current_angle  =   sim.getJointPosition(joint1_handle) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (current_angle) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 new_angle  =   current_angle  +   target_angle \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetPosition(joint1_handle, new_angle) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 按鍵狀態設為 True \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 key_pressed  =   True \n \xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 若未按鍵時狀態重設為 False \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 key_pressed  =   False \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'q\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 按下 q 可以跳出重複迴圈 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break \n \xa0\xa0\xa0\xa0 # 暫停 0.01 秒 \n \xa0\xa0\xa0\xa0 time.sleep( 0.01 ) \n \n \n \n \n \n \n \n 自行計算每次增量轉動角度而非取 joint1 當時的角度後再增量, 試圖縮小轉動角度的累進誤差: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n \n \n \n # Import the required modules \n from   zmqRemoteApi_IPv6  import   RemoteAPIClient \n import   time \n import   math \n import   keyboard \n \xa0 \n # Connect to the scene server using zmqRemoteAPI \n client  =   RemoteAPIClient( \'localhost\' ,  23000 ) \n \xa0 \n # Get the required objects from the scene \n sim  =   client.getObject( \'sim\' ) \n box  =   sim.getObject( \'/box\' ) \n joint1_handle  =   sim.getObject( \'/joint1\' ) \n \xa0 \n # Start the simulation \n sim.startSimulation() \n \xa0 \n # Initialize variables \n key_pressed  =   False \n counter  =   0 \n total_rotation_angle  =   0.0 \n \xa0 \n while   True : \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'i\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   not   key_pressed: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # When the \'i\' key is pressed for the first time \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "i key pressed!" ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Increment the counter and calculate the target rotation angle \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 counter  + =   1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (counter) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 target_angle  =   math.radians( - 36 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Add the target angle to the total rotation angle \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 total_rotation_angle  + =   target_angle \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "Total Rotation Angle:" , math.degrees(total_rotation_angle)) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Set the new joint target position using the total rotation angle \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetPosition(joint1_handle, total_rotation_angle) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Set the key_pressed flag to True \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 key_pressed  =   True \n \xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Reset the key_pressed flag if the \'i\' key is not pressed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 key_pressed  =   False \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'q\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Exit the loop if the \'q\' key is pressed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 # Pause for 0.01 seconds \n \xa0\xa0\xa0\xa0 time.sleep( 0.01 ) \n \n \n \n \n \n \n \n 假如希望從 server 設定可以連線進行 zmqremoteapi 控制的電腦 IP 位址, 可以參考: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n \n \n \n --[[ \n The "for _, ip in ipairs(authorizedIPs) do" line in the provided code snippet is a loop that iterates over the elements of the "authorizedIPs" table. Let\'s break down the syntax: \n \xa0 \n - "for" is the keyword used to start a loop. \n - "_" is a placeholder variable that represents the index of the element in the table. Since we\'re only interested in the IP addresses and not their corresponding indices, we use "_" to indicate that we don\'t need to assign the index value to a variable. \n - "ip" is the variable that represents the value of each element in the table during each iteration of the loop. \n - "in" is the keyword used to separate the placeholder variable and the table being iterated. \n - "ipairs(authorizedIPs)" is a function that returns an iterator function along with the "authorizedIPs" table. The iterator function will provide the index and value of each element in the table. \n \xa0 \n So, in summary, the "for _, ip in ipairs(authorizedIPs) do" loop iterates over each IP address in the "authorizedIPs" table, assigning the IP address to the "ip" variable during each iteration. \n --]] \n \xa0 \n if   zmqRemoteApi.verbose()>0  then \n \xa0\xa0\xa0\xa0 local   authorizedIPs = { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 "192.168.1.100" ,\xa0  -- Authorized IP address 1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 "192.168.1.101" ,\xa0  -- Authorized IP address 2 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 "192.168.1.102" \xa0\xa0  -- Authorized IP address 3 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- Add more authorized IP addresses as needed \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 local   clientIP = simZMQ.getsockopt(rpcSocket, simZMQ.LAST_ENDPOINT) \n \xa0\xa0\xa0\xa0 local   isAuthorized =  false \n \xa0\xa0\xa0\xa0 -- Check if the client\'s IP address is in the list of authorized IP addresses \n \xa0\xa0\xa0\xa0 for   _, ip  in   ipairs (authorizedIPs)  do \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   clientIP == ip  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 isAuthorized =  true \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0 end \n \xa0 \n \xa0\xa0\xa0\xa0 if   not   isAuthorized  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.addLog(sim.verbosity_scriptinfos,  "Unauthorized client attempted to connect from IP: "   .. clientIP) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.addLog(sim.verbosity_scriptinfos,  "Access denied." ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   { cmd =  \'cleanup\'   }  -- Disconnect the unauthorized client \n \xa0\xa0\xa0\xa0 end \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.addLog(sim.verbosity_scriptinfos, string.format ( \'ZeroMQ Remote API server starting (rpcPort=%d, cntPort=%d)...\' ,rpcPort,cntPort)) \n \n \n \n \n \n \n \n create cart using omniwheel: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n 106 \n 107 \n 108 \n 109 \n 110 \n 111 \n 112 \n 113 \n \n \n \n from   zmqRemoteApi_IPv6  import   RemoteAPIClient \n import   time \n import   math \n import   keyboard \n \xa0 \n # Connect to the CoppeliaSim scene server \n client  =   RemoteAPIClient( \'localhost\' ,  23000 ) \n sim  =   client.getObject( \'sim\' ) \n #sim.startSimulation() \n \xa0 \n # Load the Omniwheel 45deg A1 model \n wheel_a1_file  =   "C:/CoppeliaSimEdu_4.5.1_rev4_for_cd2023/models/components/locomotion and propulsion/Omniwheel 45deg A.ttm" \n wheel_a1_handle  =   sim.loadModel(wheel_a1_file) \n wheel_a1_name  =   "wheelA1" \n sim.setObjectAlias(wheel_a1_handle, wheel_a1_name) \n \xa0 \n # Load the Omniwheel 45deg A2 model \n wheel_a2_file  =   "C:/CoppeliaSimEdu_4.5.1_rev4_for_cd2023/models/components/locomotion and propulsion/Omniwheel 45deg A.ttm" \n wheel_a2_handle  =   sim.loadModel(wheel_a2_file) \n wheel_a2_name  =   "wheelA2" \n sim.setObjectAlias(wheel_a2_handle, wheel_a2_name) \n \xa0 \n # Load the Omniwheel 45deg B1 model \n wheel_b1_file  =   "C:/CoppeliaSimEdu_4.5.1_rev4_for_cd2023/models/components/locomotion and propulsion/Omniwheel 45deg B.ttm" \n wheel_b1_handle  =   sim.loadModel(wheel_b1_file) \n wheel_b1_name  =   "wheelB1" \n sim.setObjectAlias(wheel_b1_handle, wheel_b1_name) \n \xa0 \n # Load the Omniwheel 45deg B2 model \n wheel_b2_file  =   "C:/CoppeliaSimEdu_4.5.1_rev4_for_cd2023/models/components/locomotion and propulsion/Omniwheel 45deg B.ttm" \n wheel_b2_handle  =   sim.loadModel(wheel_b2_file) \n wheel_b2_name  =   "wheelB2" \n sim.setObjectAlias(wheel_b2_handle, wheel_b2_name) \n \xa0 \n # Create a chassis object \n # set chassis to be 10kg \n chassis_handle  =   sim.createPureShape( 0 ,  8 , [ 0.1 ,  0.2 ,  0.05 ],  10 ,  None ) \n sim.setObjectAlias(chassis_handle,  \'chassis\' ) \n \xa0 \n #Set the local respondable mask to ffff0000 (since the wheel repondable is fff0) \n sim.setObjectInt32Param(chassis_handle, sim.shapeintparam_respondable_mask,  0xff0f ) \n \xa0 \n # Set the position and orientation of the chassis \n sim.setObjectPosition(chassis_handle,  - 1 , [ 0 ,  0 ,  0.055 ]) \n sim.setObjectOrientation(chassis_handle,  - 1 , [ 0 ,  0 ,  0 ]) \n \xa0 \n # Set the positions of the wheels relative to the chassis \n wheel_a1_pos  =   [ - 0.085 ,  0.075 ,  - 0.005 ] \n wheel_a2_pos  =   [ 0.085 ,  - 0.075 ,  - 0.005 ] \n wheel_b1_pos  =   [ 0.085 ,  0.075 ,  - 0.005 ] \n wheel_b2_pos  =   [ - 0.085 ,  - 0.075 ,  - 0.005 ] \n \xa0 \n # Set the positions of the wheels \n sim.setObjectPosition(wheel_a1_handle, chassis_handle, wheel_a1_pos) \n sim.setObjectPosition(wheel_a2_handle, chassis_handle, wheel_a2_pos) \n sim.setObjectPosition(wheel_b1_handle, chassis_handle, wheel_b1_pos) \n sim.setObjectPosition(wheel_b2_handle, chassis_handle, wheel_b2_pos) \n \xa0 \n # Set the parent-child relationship between the wheels and the chassis \n sim.setObjectParent(wheel_a1_handle, chassis_handle,  True ) \n sim.setObjectParent(wheel_a2_handle, chassis_handle,  True ) \n sim.setObjectParent(wheel_b1_handle, chassis_handle,  True ) \n sim.setObjectParent(wheel_b2_handle, chassis_handle,  True ) \n \xa0 \n # Set wheel velocities \n wheel_a1_velocity  =   0 \n wheel_a2_velocity  =   0 \n wheel_b1_velocity  =   0 \n wheel_b2_velocity  =   0 \n \xa0 \n # Set the control loop \n while   True : \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'up\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a1_velocity  =   10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a2_velocity  =   10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b1_velocity  =   10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b2_velocity  =   10 \n \xa0\xa0\xa0\xa0 elif   keyboard.is_pressed( \'down\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a1_velocity  =   - 10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a2_velocity  =   - 10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b1_velocity  =   - 10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b2_velocity  =   - 10 \n \xa0\xa0\xa0\xa0 elif   keyboard.is_pressed( \'left\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a1_velocity  =   - 10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a2_velocity  =   10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b1_velocity  =   10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b2_velocity  =   - 10 \n \xa0\xa0\xa0\xa0 elif   keyboard.is_pressed( \'right\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a1_velocity  =   10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a2_velocity  =   - 10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b1_velocity  =   - 10 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b2_velocity  =   10 \n \xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a1_velocity  =   0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_a2_velocity  =   0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b1_velocity  =   0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 wheel_b2_velocity  =   0 \n \xa0 \n \xa0\xa0\xa0\xa0 # Set the target velocities for the wheels \n \xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(wheel_a1_handle, wheel_a1_velocity) \n \xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(wheel_a2_handle, wheel_a2_velocity) \n \xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(wheel_b1_handle, wheel_b1_velocity) \n \xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(wheel_b2_handle, wheel_b2_velocity) \n \xa0 \n \xa0\xa0\xa0\xa0 # Let CoppeliaSim process the wheel velocities \n \xa0\xa0\xa0\xa0 time.sleep( 0.01 ) \n \xa0 \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'q\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Press \'q\' to break the loop \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break \n \xa0 \n # Stop the simulation \n # sim.stopSimulation() \n \n \n \n \n \n \n \n \n Virtualbox <<  Previous   Next  >> Robot Soccer \n  footer  \n \n \n  Link back to Colorlib can\'t be removed. Template is licensed under CC BY 3.0.   Copyright ©\n \n2023 All rights reserved | This template is made with   by  Colorlib    Link back to Colorlib can\'t be removed. Template is licensed under CC BY 3.0.  \n \n \n  for footer  \n  for site wrap  \n \n  <script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"></script>  \n \n \n \n \n \n \n \n \n \n \n \n \n \n            <script src="../cmsimde/static/chimper/js/typed.js"></script>\n                    <script>\n                    var typed = new Typed(\'.typed-words\', {\n                    strings: ["Web Apps"," WordPress"," Mobile Apps"],\n                    typeSpeed: 80,\n                    backSpeed: 80,\n                    backDelay: 4000,\n                    startDelay: 1000,\n                    loop: true,\n                    showCursor: true\n                    });\n                    </script>\n             \n \n \n \n  啟用 LaTeX equations 編輯  \n \n  <script>\n  MathJax = {\n    tex: {inlineMath: [[\'$\', \'$\'], [\'\\(\', \'\\)\']]}\n  };\n  </script>\n  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>', 'tags': '', 'url': 'pj3.html'}, {'title': '記分板', 'text': '初代記分板:( 記分板 ) \n 該版本之記分板如下圖，本因中間之轉盤一換成日內瓦機構，但因在初步設計時，未詳細考慮公差配合，因此放棄該版本，改由下面之 次代及三代記分板取代。 \n \n 日內瓦機構 \n \n 1 \n 1 \n \n 次代記分板: \n 41023234記分板 \n 次代記分板設計圖: \n \n \n \n \n \n 1 \n 1 \n 三代的數字都改模成新版的個別分件，通過平面配合各自組裝，使其可更加明顯，且外殼多擴兩孔、齒輪微調和增加輔助軸，使輪盤更方便抓到支點且連動更順滑，雖然變化看起來不大但總體表現都有一定更新 \n 三代記分板設計圖: \n \n \n \n \n \n 1 \n 1 \n 更新記分板外殼，因舊版顯示方式不清楚 \n \n \n \n \n \n', 'tags': '', 'url': '記分板.html'}, {'title': '球場', 'text': 'onshape: 41023234-field \n CoppeliaSim: 41023234-CS-field \n \n \n \n', 'tags': '', 'url': '球場.html'}, {'title': '球員', 'text': '666系列: \n 41023228測試用 666 \n \n . \n . \n robot-00系列: \n 由41023247製作 \n 機器人1 : robot-00系列(stl、ttt) \n \n 1 \n 1 \n 1 \n  editor1 結束  \n Maskie Razzio系列: \n 由41023234製作 \n 機器人2: bulldozer6 \n \n 機器人3: bulldozer4 \n \n 機器人4: tank \n \n 機器人5: castle \n \n 機器人6: Eye of Sauron \n \n 機器人7: cat \n \n 機器人8: battlebot \n \n 機器人?: wheelchair \n \n . \n . \n Coppeliasim: cars \n 四代與五代球員: robot2 \n 由於將前幾代球員放入CoppeliaSim裡，會使CoppeliaSim之幀數過高，使其整體運行過慢，因此將機器人重新設計。 \n 四代球員:robot-cccccc系列 \n \n 五代球員:robot-110 系列 \n \n \n', 'tags': '', 'url': '球員.html'}, {'title': '工作分配', 'text': '繪圖:41023234、41023247 \n PDF:41023228、41023251 \n 程式:41023228、41023251、41023254\xa0 \n PPT:41023219、41023222 \n 輔助:41023221、41023228 \n \n 41023219:實作整理簡報 \n 41023221:輔助編寫python主程式 \n 41023222:提供簡報指導 \n 41023228:查找參考資訊 \n https://mdecd2023.github.io/2b3-pj3bg4/content/group.html \n 41023234:細化初版模型 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E8%A8%98%E5%88%86%E6%9D%BF.html \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%93%A1.html \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%A0%B4.html \n 41023247:繪畫初版模型 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E8%A8%98%E5%88%86%E6%9D%BF.html \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%93%A1.html \n 41023251:整理全組進度 \n https://github.com/mdecd2023/2b3-pj3bg4/releases \n 41023254:編寫python主程式 \n', 'tags': '', 'url': '工作分配.html'}]};